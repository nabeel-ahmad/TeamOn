package com.spikenow.dao;

import java.io.IOException;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Map;

import com.spikenow.model.Activity;
import com.spikenow.model.ActivityCoHost;
import com.spikenow.model.ActivityPlayerList;
import com.spikenow.model.ActivityType;
import com.spikenow.model.Comment;
import com.spikenow.model.Device;
import com.spikenow.model.DirectMessage;
import com.spikenow.model.DirectMessageThread;
import com.spikenow.model.JoinRequest;
import com.spikenow.model.Notification;
import com.spikenow.model.PlayerList;
import com.spikenow.model.Subscription;
import com.spikenow.model.User;
import com.spikenow.model.UserActivity;
import com.spikenow.model.UserPreferences;

public interface SpikeDAO {
	
	public void saveUser(User user) ;
	public List<User> fetchActiveUsers() ;
	public List<Activity> listActivities(Double lat, Double lng, Double radius) throws IOException ;
	public Activity saveActivity(Activity activity) throws Exception;
	public Activity fetchActivity(Long id);
	public List<ActivityType> listActivityTypes();
	public List<Activity> fetchMyActivities(String user, Integer offset, String categoty) throws NumberFormatException, IOException;
	public JoinRequest saveJoinRequest(JoinRequest joinRequest);
	public List<Notification> listNotifications(Boolean unread, String userId);
	public User mergeUser(User user);
	public User getExistingUser(String userId);
	public void save(Notification notification);
	public JoinRequest getJoinRequest(Long id);
	public Notification fetchNotification(Long id, User user);
	public Activity fetchMyActivity(Long id, User user) throws TeamOnException;
	public List<JoinRequest> fetchJoinRequests(Long activityId, String userId);
	public ActivityType getActivityType(Long id);
	public List<Notification> listNotifications(Long activityId, Boolean unread, String id);
	public Integer fetchNotificationCount(String userId);
	public JoinRequest getJoinRequest(Long activityId, String userId);
	public List<JoinRequest> fetchMyJoinRequests(String userId, Integer page, String category) throws NumberFormatException, IOException;
	public List<User> fetchActivityVisibleParticipants(Long activityId);
	public List<User> fetchActivityParticipants(Long activityId, List<String> tokens);
	public List<UserPreferences> fetchUserPrefs(String userId);
	public List<Device> fetchUserDevices(String userId);
	public String saveUserPrefs(String userId, List<UserPreferences> list);
	public PlayerList savePlayerList(PlayerList playerList, String userId) throws Exception;
	public List<PlayerList> fetchPlayerLists(String userId);
	public void signup(User user) throws Exception;
	public User updateProfile(User user, User updateTo);
	public User activateUser(String email, String code);
	public Boolean deleteAccount(User user);
	public User getUser(String userAuth);
	public Map<String, Object> signin(String email, String password);
	public User getUserById(String email);
	public List<PlayerList> getPlayerListsByIds(List<Long> playerListIds);
	public void registerSharingAction(String action, User user, Date date);
	public Activity fetchPublicActivity(Long id);
	public boolean deletePlayerLists(Long[] ids, String userId);
	public List<ActivityPlayerList> fetchActivityPlayerLists(Long activityId);
	public void saveActivityPlayerLists(Activity activity, List<PlayerList> lists);
	public List<JoinRequest> getJoinRequests(Long activityId);
	public void saveActivityCoHosts(Long activityId, List<String> coHostIds, List<ActivityCoHost> existingCoHosts);
	public List<ActivityCoHost> getActivityCoHosts(Long activityId);
	public User getUserByEmail(String email);
	public List<User> getUsersByEmails(List<String> emails);
	public void registerDevice(Device device);
	public void unregisterDevice(Device device);
	public boolean isValidUser(String email);
	public Activity fetchFirstUpcomingActivity(String userId, boolean publicOnly);
	public List<JoinRequest> fetchAcceptedJoinRequestsForRecentActivities();
	public List<Activity> fetchDailyUpcomingActivities(String id);
	public List<Activity> fetchDailyRecentActivities(String id);
	public Boolean[] checkRegisteredUserEmails(String[] emails);
	public List<DirectMessageThread> fetchDirectMessageThreads(String userId, int page) throws Exception;
	public DirectMessageThread fetchDirectMessageThread(Long id, String userId) throws TeamOnException;
	public DirectMessageThread newDirectMessage(String recipientId, DirectMessage dm, Long activityId);
	public List<PlayerList> userInPlayerLists(String userId, String loggedInUserId);
	public void addUserInPlayerLists(String userId, Long[] pListIds, String loggedInUserId) throws TeamOnException;
	public List<Comment> fetchComments(Long activityId, int page) throws Exception;
	public Comment newComment(Long activityId, String text, User user);
	public int fetchCommentCount(Long activityId);
	public Integer getOrganizedGameCountByUser(String userId);
	public Integer getJoinedGameCountByUser(String userId);
	public Collection<UserActivity> explorePlayerLists(String userId) throws TeamOnException;
	public Collection<UserActivity> explorePlayerList(Long id, String id2) throws TeamOnException;
	public void blockUser(String userId, User liUser);
	public void unblockUser(String userId, User liUser);
	public boolean isBlockedUser(String userId, User liUser);
	boolean isHost(Activity activity, User user);
	public DirectMessageThread fetchDirectMessageThreadByUserId(User liUser, String id) throws Exception;
	public PlayerList getPlayerList(Long plId, String userId);
	public Subscription saveSubscription(User user, Subscription subscription) throws Exception;
	public List<Subscription> fetchSubscriptions(User user);
	public Subscription fetchSubscription(Long id, User user);
	public boolean deleteSubscription(Long id, User user);
	public List<Subscription> getSubscribers(Activity result);
	public boolean playerListHasUser(Long plId, String userId);
	public boolean deleteSubscriptions(List<Long> ids, User user);
	
}
